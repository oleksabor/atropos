// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Curfew.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atropos.Common.Dto
{

	/// <summary>Holder for reflection information generated from Curfew.proto</summary>
	public static partial class CurfewReflection
	{

		#region Descriptor
		/// <summary>File descriptor for Curfew.proto</summary>
		public static pbr::FileDescriptor Descriptor
		{
			get { return descriptor; }
		}
		private static pbr::FileDescriptor descriptor;

		static CurfewReflection()
		{
			byte[] descriptorData = global::System.Convert.FromBase64String(
				string.Concat(
				  "CgxDdXJmZXcucHJvdG8SEkF0cm9wb3MuQ29tbW9uLkR0byJcCgZDdXJmZXcS",
				  "CgoCaWQYASABKAUSDwoHd2Vla0RheRgCIAEoCRIOCgZ1c2VySWQYAyABKAUS",
				  "EQoJdGltZVZhbHVlGAQgASgDEhIKCmJyZWFrVmFsdWUYBSABKANiBnByb3Rv",
				  "Mw=="));
			descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
				new pbr::FileDescriptor[] { },
				new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
			new pbr::GeneratedClrTypeInfo(typeof(global::Atropos.Common.Dto.Curfew), global::Atropos.Common.Dto.Curfew.Parser, new[]{ "Id", "WeekDay", "UserId", "TimeValue", "BreakValue" }, null, null, null)
				}));
		}
		#endregion

	}
	#region Messages
	public sealed partial class Curfew : pb::IMessage<Curfew>
	{
		private static readonly pb::MessageParser<Curfew> _parser = new pb::MessageParser<Curfew>(() => new Curfew());
		private pb::UnknownFieldSet _unknownFields;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public static pb::MessageParser<Curfew> Parser { get { return _parser; } }

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public static pbr::MessageDescriptor Descriptor
		{
			get { return global::Atropos.Common.Dto.CurfewReflection.Descriptor.MessageTypes[0]; }
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		pbr::MessageDescriptor pb::IMessage.Descriptor
		{
			get { return Descriptor; }
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Curfew()
		{
			OnConstruction();
		}

		partial void OnConstruction();

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Curfew(Curfew other) : this()
		{
			id_ = other.id_;
			weekDay_ = other.weekDay_;
			userId_ = other.userId_;
			timeValue_ = other.timeValue_;
			breakValue_ = other.breakValue_;
			_unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public Curfew Clone()
		{
			return new Curfew(this);
		}

		/// <summary>Field number for the "id" field.</summary>
		public const int IdFieldNumber = 1;
		private int id_;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public int Id
		{
			get { return id_; }
			set
			{
				id_ = value;
			}
		}

		/// <summary>Field number for the "weekDay" field.</summary>
		public const int WeekDayFieldNumber = 2;
		private string weekDay_ = "";
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public string WeekDay
		{
			get { return weekDay_; }
			set
			{
				weekDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
			}
		}

		/// <summary>Field number for the "userId" field.</summary>
		public const int UserIdFieldNumber = 3;
		private int userId_;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public int UserId
		{
			get { return userId_; }
			set
			{
				userId_ = value;
			}
		}

		/// <summary>Field number for the "timeValue" field.</summary>
		public const int TimeValueFieldNumber = 4;
		private long timeValue_;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public long TimeValue
		{
			get { return timeValue_; }
			set
			{
				timeValue_ = value;
			}
		}

		/// <summary>Field number for the "breakValue" field.</summary>
		public const int BreakValueFieldNumber = 5;
		private long breakValue_;
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public long BreakValue
		{
			get { return breakValue_; }
			set
			{
				breakValue_ = value;
			}
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override bool Equals(object other)
		{
			return Equals(other as Curfew);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public bool Equals(Curfew other)
		{
			if (ReferenceEquals(other, null))
			{
				return false;
			}
			if (ReferenceEquals(other, this))
			{
				return true;
			}
			if (Id != other.Id) return false;
			if (WeekDay != other.WeekDay) return false;
			if (UserId != other.UserId) return false;
			if (TimeValue != other.TimeValue) return false;
			if (BreakValue != other.BreakValue) return false;
			return Equals(_unknownFields, other._unknownFields);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override int GetHashCode()
		{
			int hash = 1;
			if (Id != 0) hash ^= Id.GetHashCode();
			if (WeekDay.Length != 0) hash ^= WeekDay.GetHashCode();
			if (UserId != 0) hash ^= UserId.GetHashCode();
			if (TimeValue != 0L) hash ^= TimeValue.GetHashCode();
			if (BreakValue != 0L) hash ^= BreakValue.GetHashCode();
			if (_unknownFields != null)
			{
				hash ^= _unknownFields.GetHashCode();
			}
			return hash;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public override string ToString()
		{
			return pb::JsonFormatter.ToDiagnosticString(this);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void WriteTo(pb::CodedOutputStream output)
		{
			if (Id != 0)
			{
				output.WriteRawTag(8);
				output.WriteInt32(Id);
			}
			if (WeekDay.Length != 0)
			{
				output.WriteRawTag(18);
				output.WriteString(WeekDay);
			}
			if (UserId != 0)
			{
				output.WriteRawTag(24);
				output.WriteInt32(UserId);
			}
			if (TimeValue != 0L)
			{
				output.WriteRawTag(32);
				output.WriteInt64(TimeValue);
			}
			if (BreakValue != 0L)
			{
				output.WriteRawTag(40);
				output.WriteInt64(BreakValue);
			}
			if (_unknownFields != null)
			{
				_unknownFields.WriteTo(output);
			}
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public int CalculateSize()
		{
			int size = 0;
			if (Id != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
			}
			if (WeekDay.Length != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeStringSize(WeekDay);
			}
			if (UserId != 0)
			{
				size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
			}
			if (TimeValue != 0L)
			{
				size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeValue);
			}
			if (BreakValue != 0L)
			{
				size += 1 + pb::CodedOutputStream.ComputeInt64Size(BreakValue);
			}
			if (_unknownFields != null)
			{
				size += _unknownFields.CalculateSize();
			}
			return size;
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void MergeFrom(Curfew other)
		{
			if (other == null)
			{
				return;
			}
			if (other.Id != 0)
			{
				Id = other.Id;
			}
			if (other.WeekDay.Length != 0)
			{
				WeekDay = other.WeekDay;
			}
			if (other.UserId != 0)
			{
				UserId = other.UserId;
			}
			if (other.TimeValue != 0L)
			{
				TimeValue = other.TimeValue;
			}
			if (other.BreakValue != 0L)
			{
				BreakValue = other.BreakValue;
			}
			_unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		public void MergeFrom(pb::CodedInputStream input)
		{
			uint tag;
			while ((tag = input.ReadTag()) != 0)
			{
				switch (tag)
				{
					default:
						_unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
						break;
					case 8:
						{
							Id = input.ReadInt32();
							break;
						}
					case 18:
						{
							WeekDay = input.ReadString();
							break;
						}
					case 24:
						{
							UserId = input.ReadInt32();
							break;
						}
					case 32:
						{
							TimeValue = input.ReadInt64();
							break;
						}
					case 40:
						{
							BreakValue = input.ReadInt64();
							break;
						}
				}
			}
		}

	}

	#endregion

}

#endregion Designer generated code
